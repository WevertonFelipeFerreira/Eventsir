version: '3.8'

services:
  event-service:
    container_name: event-service
    build:
      context: ./Eventsir.Services.Events
      dockerfile: dockerfile
    ports:
      - "5001:443" #https
      - "5002:80" #http
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=https://+:443;http://+:80
      - Mongo__ConnectionString=mongodb+srv://<YourMongoDbRepSet>.mongodb.net
      - RabbitMQ__Hostname=rabbitmq
      - ConnectionStrings__Redis=redis:6379,defaultDatabase=0
    depends_on:
      - rabbitMq
    networks:
      - my-network

  rabbitMq:
    container_name: rabbitMQ
    image: rabbitmq:3.13-management
    hostname: "rabbitmq"
    labels:
      NAME: "rabbitmq"
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes:
      - rabbit-data:/data/db
    networks:
      - my-network

  postgres:
    container_name: postgres
    image: postgres:9.6
    environment:
      POSTGRES_USER: kong
      POSTGRES_DB: kong
      POSTGRES_PASSWORD: kongpass
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "kong"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - my-network

  kong-bootstrap:
    container_name: kong-bootstrap
    image: kong/kong-gateway:2.8
    command: "kong migrations bootstrap"
    restart: on-failure
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: postgres
      KONG_PG_PASSWORD: kongpass
      KONG_PASSWORD: test
    depends_on:
      - postgres
    networks:
      - my-network

  kong-gateway:
    container_name: kong-gateway
    restart: always
    image: kong/kong-gateway:2.8
    ports:
      #SECURE
      - "8443:8443" #PROXY
      - "8444:8444" #ADMIN
      - "8445:8445" #GUI
      # INSECURE
      - "8000:8000"   #PROXY
      - "8001:8001"   #ADMIN
      - "8002:8002"   #GUI
    volumes:
      - ./docker/certs:/etc/ssl/certs
    environment:
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_ADMIN_LISTEN: 0.0.0.0:8001, 0.0.0.0:8444 ssl
      KONG_DATABASE: postgres
      KONG_PG_HOST: postgres
      KONG_PG_PASSWORD: kongpass
      KONG_PASSWORD: test
      KONG_ADMIN_GUI_URL: http://localhost:8002
      KONG_SSL_CERT: /etc/ssl/certs/localhost.crt
      KONG_SSL_CERT_KEY: /etc/ssl/certs/localhost.key
      KONG_ADMIN_SSL_CERT: /etc/ssl/certs/localhost.crt
      KONG_ADMIN_SSL_CERT_KEY: /etc/ssl/certs/localhost.key
      KONG_ADMIN_GUI_SSL_CERT: /etc/ssl/certs/localhost.crt
      KONG_ADMIN_GUI_SSL_CERT_KEY: /etc/ssl/certs/localhost.key
    depends_on:
      - postgres
      - kong-bootstrap
    networks:
      - my-network

  elasticsearch:
    container_name: elasticsearch
    image: 'elasticsearch:8.2.2'
    environment:
      discovery.type: single-node
      xpack.security.enabled: 'false'
      xpack.security.http.ssl.enabled: 'false'
      xpack.security.transport.ssl.enabled: 'false'
    restart: always
    networks:
      - my-network

  grafana:
    container_name: grafana
    restart: always
    image: grafana/grafana-oss
    ports:
      - "3080:3000"
    networks:
      - my-network

  prometheus:
    container_name: prometheus
    restart: always
    image: prom/prometheus
    volumes:
      - ./docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    networks:
      - my-network

  zipkin:
    container_name: zipkin
    restart: always
    image: openzipkin/zipkin
    ports:
      - "9411:9411"
    networks:
      - my-network

  kibana:
    container_name: kibana
    image: 'kibana:8.2.2'
    environment:
      ELASTICSEARCH_HOSTS: 'http://elasticsearch:9200'
    ports:
      - "5601:5601"
    restart: always

    depends_on:
      - elasticsearch
    networks:
      - my-network
  
  keycloak:
    container_name: keycloak
    image: quay.io/keycloak/keycloak:18.0.0
    command:
    - start-dev
    ports:
      - "8080:8080"
    environment:
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin
      DB_ADDR: postgres
      DB_USER: kong
      DB_PASSWORD: kongpass 
    depends_on:
      - postgres
    networks:
      - my-network

  redis:
    image: redis:latest
    container_name: redis
    ports:
      - "6379:6379"
    command: ["redis-server", "--appendonly", "yes"]
    volumes:
      - redis-data:/data
    networks:
      - my-network

  redisinsight:
    image: redis/redisinsight:latest
    container_name: redisinsight
    ports:
      - "5540:5540"
    depends_on:
      - redis
    environment:
      - REDIS_HOST=redis 
    networks:
      - my-network

volumes:
  rabbit-data:
  redis-data:

networks:
  default:
    name: kong-wks
  my-network:
    driver: bridge
